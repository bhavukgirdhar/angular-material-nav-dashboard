/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { VoucherNumberWrapper } from '../model/voucherNumberWrapper';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class VoucherNumberServiceService {

    protected basePath = '/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * getNextVoucherNumber
     * 
     * @param date 
     * @param voucherCls 
     * @param subType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNextVoucherNumber(date?: string, voucherCls?: string, subType?: number, observe?: 'body', reportProgress?: boolean): Observable<VoucherNumberWrapper>;
    public getNextVoucherNumber(date?: string, voucherCls?: string, subType?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VoucherNumberWrapper>>;
    public getNextVoucherNumber(date?: string, voucherCls?: string, subType?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VoucherNumberWrapper>>;
    public getNextVoucherNumber(date?: string, voucherCls?: string, subType?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (date !== undefined && date !== null) {
            queryParameters = queryParameters.set('date', <any>date);
        }
        if (voucherCls !== undefined && voucherCls !== null) {
            queryParameters = queryParameters.set('voucherCls', <any>voucherCls);
        }
        if (subType !== undefined && subType !== null) {
            queryParameters = queryParameters.set('subType', <any>subType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VoucherNumberWrapper>('get',`${this.basePath}/admin/accounting/VoucherNumberService/getNextVoucherNumber`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * isVoucherExistsForLedger
     * 
     * @param voucherNumber 
     * @param voucherCls 
     * @param currentVoucher 
     * @param subType 
     * @param date 
     * @param ledger 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isVoucherExistsForLedger(voucherNumber?: string, voucherCls?: string, currentVoucher?: number, subType?: number, date?: string, ledger?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isVoucherExistsForLedger(voucherNumber?: string, voucherCls?: string, currentVoucher?: number, subType?: number, date?: string, ledger?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isVoucherExistsForLedger(voucherNumber?: string, voucherCls?: string, currentVoucher?: number, subType?: number, date?: string, ledger?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isVoucherExistsForLedger(voucherNumber?: string, voucherCls?: string, currentVoucher?: number, subType?: number, date?: string, ledger?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (voucherNumber !== undefined && voucherNumber !== null) {
            queryParameters = queryParameters.set('voucherNumber', <any>voucherNumber);
        }
        if (voucherCls !== undefined && voucherCls !== null) {
            queryParameters = queryParameters.set('voucherCls', <any>voucherCls);
        }
        if (currentVoucher !== undefined && currentVoucher !== null) {
            queryParameters = queryParameters.set('currentVoucher', <any>currentVoucher);
        }
        if (subType !== undefined && subType !== null) {
            queryParameters = queryParameters.set('subType', <any>subType);
        }
        if (date !== undefined && date !== null) {
            queryParameters = queryParameters.set('date', <any>date);
        }
        if (ledger !== undefined && ledger !== null) {
            queryParameters = queryParameters.set('ledger', <any>ledger);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/admin/accounting/VoucherNumberService/isVoucherExistsForLedger`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * isVoucherExists
     * 
     * @param voucherNumber 
     * @param voucherCls 
     * @param currentVoucher 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isVoucherExistsVoucherNumberVoucherClsCurrentVoucher(voucherNumber?: string, voucherCls?: string, currentVoucher?: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isVoucherExistsVoucherNumberVoucherClsCurrentVoucher(voucherNumber?: string, voucherCls?: string, currentVoucher?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isVoucherExistsVoucherNumberVoucherClsCurrentVoucher(voucherNumber?: string, voucherCls?: string, currentVoucher?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isVoucherExistsVoucherNumberVoucherClsCurrentVoucher(voucherNumber?: string, voucherCls?: string, currentVoucher?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (voucherNumber !== undefined && voucherNumber !== null) {
            queryParameters = queryParameters.set('voucherNumber', <any>voucherNumber);
        }
        if (voucherCls !== undefined && voucherCls !== null) {
            queryParameters = queryParameters.set('voucherCls', <any>voucherCls);
        }
        if (currentVoucher !== undefined && currentVoucher !== null) {
            queryParameters = queryParameters.set('currentVoucher', <any>currentVoucher);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/admin/accounting/VoucherNumberService/isVoucherExists_voucherNumber_voucherCls_currentVoucher`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * isVoucherExists
     * 
     * @param voucherNumber 
     * @param voucherCls 
     * @param currentVoucher 
     * @param subType 
     * @param date 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isVoucherExistsVoucherNumberVoucherClsCurrentVoucherSubTypeDate(voucherNumber?: string, voucherCls?: string, currentVoucher?: number, subType?: number, date?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isVoucherExistsVoucherNumberVoucherClsCurrentVoucherSubTypeDate(voucherNumber?: string, voucherCls?: string, currentVoucher?: number, subType?: number, date?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isVoucherExistsVoucherNumberVoucherClsCurrentVoucherSubTypeDate(voucherNumber?: string, voucherCls?: string, currentVoucher?: number, subType?: number, date?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isVoucherExistsVoucherNumberVoucherClsCurrentVoucherSubTypeDate(voucherNumber?: string, voucherCls?: string, currentVoucher?: number, subType?: number, date?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (voucherNumber !== undefined && voucherNumber !== null) {
            queryParameters = queryParameters.set('voucherNumber', <any>voucherNumber);
        }
        if (voucherCls !== undefined && voucherCls !== null) {
            queryParameters = queryParameters.set('voucherCls', <any>voucherCls);
        }
        if (currentVoucher !== undefined && currentVoucher !== null) {
            queryParameters = queryParameters.set('currentVoucher', <any>currentVoucher);
        }
        if (subType !== undefined && subType !== null) {
            queryParameters = queryParameters.set('subType', <any>subType);
        }
        if (date !== undefined && date !== null) {
            queryParameters = queryParameters.set('date', <any>date);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/admin/accounting/VoucherNumberService/isVoucherExists_voucherNumber_voucherCls_currentVoucher_subType_date`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
